(page "index.html"
  (:import [goog.string.format])
  (:require
    [clicker.engine :as e]
    [data.db :as d]
    [clojure.string :as string]
    [goog.string :as gstring]
    [goog.string.format]))

(defc state { :things {"Slogan" 0 "Notepad" 0}})
(defc god false)
(defn level-value-fn [n]
  (+
    (Math/pow n 4)
    (* 10 n)))

; sentinels
(defc= clicks (gstring/format "%.0f" (:clicks state 0)))
(defc= add-every (:add-every state 0))
(defc= add-every-fmt (gstring/format "%.2f" add-every))
(defc= money (gstring/format "%.2f" (:money state 0)))
(defc= state-str (with-out-str (cljs.pprint/pprint state)))

(js/setInterval
  #(e/click state :change-fn (fn [m] (+ m @add-every))) 1000)

(defelem tap-button [{:keys [name btn-txt n]} kids]
  (let [disabled (cell= (not (e/can-tap? state name :n n)))
        click-fn #(e/tap state name :n n)]
    (button :disabled disabled :click click-fn n kids)))

(defelem tap-buttons [{:keys [name btn-txt]} kids]
  (for [n [1 10 100 1000]]
    (tap-button :name name :btn-txt btn-txt :n n)))

(defelem rows [{:keys [type btn-txt]} kids]
  (for [thing (get-in d/data [type :items])]
    (do
      (let [name (thing :name)
            loss (thing :cost)
            gain (cell= (gstring/format "%.2f" (e/next-gain state name)))
            count (cell= (e/thing-count state name))]

          (tr :class (cell= {:newitem (= count 0) :olditem (> count 0)})
            (td name)
            (td loss)
            (td gain)
            (td count)
            (td (tap-buttons :name name :btn-txt btn-txt)))))))

(html
  (head
    (link :href "app.css" :rel "stylesheet" :type "text/css"))
  (body
    (h3 clicks " words")
    (button :click #(e/click state) "Write a word")

    (h5 "$" money " income")
    (h5 "Creativity boost of " add-every-fmt " words every second")

    (if-tpl god
      (div
       (for [level (range 6)]
         (let [n (level-value-fn level)]
           (button :click #(e/click state :change-fn (fn [m] (+ m n))) n)))))

    (div :class "wrapper"

      (div :class "upgrade"
        (table
          (caption "Upgrade your tools")
          (thead
            (tr
              (th "Thing")
              (th "$ Cost")
              (th "Boost")
              (th "# Bought")
              (th "")))
          (rows :type :tool :btn-txt "Buy")))


      (div :class "sell"
        (table
          (caption "Sell your words")
          (thead
            (tr
              (th "Thing")
              (th "Word cost")
              (th "$ Income")
              (th "# Sold")
              (th "")))
          (rows :type :product :btn-txt "Sell"))))

    (if-tpl god
      (div :class "debug"
        (h4 "State")
        (pre state-str)))))

