(page "index.html"
  (:require
    [data.index :as d]))

(defc god true)
(defc clicks 0)
(defc add-every 0)
(defc sales 0)
(defc xs [10 100 1000])

(js/setInterval #(swap! clicks (fn [m] (+ m @add-every))) 1000)


; upgrade: add-every go up by value in upgrade lookup
;       sales go down by the value of the key in the upgrade lookup
(defelem upgrade-btn
  [{:keys [level]} kids]
  (let [datum (d/data level)
      text (:text datum)
      bump (:bump datum)
      func #(swap! add-every (fn [m] (+ m bump)))
      func2 #(swap! sales (fn [m] (- m level)))
      func-all (fn [] (func) (func2))]
    ((button :click func-all) text kids)))

; sell: sales go up by value in sales lookup
;       words go down by the value of the key in the sales lookup
(defelem sell-btn
  [{:keys [level]} kids]
  (let [datum (d/sale level)
      text (:text datum)
      bump (:bump datum)
      func #(swap! sales (fn [m] (+ m bump)))
      func2 #(swap! clicks (fn [m] (- m level)))
      func-all (fn [] (func) (func2))]
    ((button :click func-all) text kids)))

(html
  (head
    ; (link :href "app.css" :rel "stylesheet" :type "text/css")
    )
  (body
    (h3 clicks " words")
    (h3 "$" sales " income")
    (h5 add-every " added every second")
    
    (button :click #(swap! clicks inc) "Write a word")

    (if-tpl god
      (for [n [10 100 1000]]
        (button :click #(swap! clicks (fn [m] (+ m n))) (str "Write " n " words"))))
    
    (h4 "Upgrade")
    (for [x [10 100 1000]]
      (cell= (if (< x sales)
      (p (upgrade-btn :level x)))))

    (h4 "Sell")
    (for [x [10 100 1000]]
      (cell= (if (< x clicks)
      (p (sell-btn :level x)))))
    
    ))
