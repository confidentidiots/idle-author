(page "index.html"
  (:import [goog.string.format])
  (:require
    [clicker.engine :as e]
    [clicker.util :as u]
    [clojure.string :as string]
    [goog.string :as gstring]
    [goog.string.format]
    [ui.buttons :as buttons]
    [ui.levels :as levels]
    [ui.research :as research]
    [ui.status :as status]
    [hoplon.storage-atom :refer [local-storage]]))

(def state (-> (cell {}) (local-storage ::store)))
; (defc state u/default-state)
(defc= add-every (get-in state [:values :add-every] 0))

(defn game-loop []
  (do
    (e/click state :change-fn (fn [m] (+ m @add-every)))))

(js/setInterval game-loop 1000)

(defc god false)
(defn level-value-fn [n]
  (+
    (Math/pow n 4)
    (* 10 n)))

; sentinels
(defc= clicks (gstring/format "%.0f" (get-in state [:values :clicks] 0)))
(defc= add-every-fmt (gstring/format "%.2f" add-every))
(defc= money (u/currency-format (get-in state [:values :money] 0)))
(defc= state-str (with-out-str (cljs.pprint/pprint state)))
(defc= has-started (e/has-started? state))

(html
  (head
    (link :href "app.css" :rel "stylesheet" :type "text/css")
    (link :href "grids.css" :rel "stylesheet" :type "text/css")
    (link :href "research.css" :rel "stylesheet" :type "text/css"))
  (body

    (if-tpl has-started

      (div :class "grid-all"
        (status/show-updates
          :state state)

        (div :class "stats"
          (h3 clicks " words")
          (button :click #(e/click state) "Write a word")
          (h5 money " income")
          (h5 "Creativity boost of " add-every-fmt " words every second"))

        (research/item-list :state state :groups [:product-level :tool-level])

        (buttons/tool-list :state state)
        (buttons/product-list :state state))

      (div :class "start"
        (button "Start" :click #(e/start state))))

    (if-tpl god
      (div :class "debug"
        (span "Words")
        (for [level (range 11)]
          (let [n (level-value-fn level)]
            (button :click #(e/click state :change-fn (fn [m] (+ m n))) n)))
        (span "Money")
        (for [level (range 11)]
          (let [n (level-value-fn level)]
            (button :click #(swap! state update-in [:values :money] (fnil (fn [m] (+ m n)) 0)) n)))
        (h4 "State")
        (pre state-str)))))

