(ns ui.levels
  (:require
    [clicker.engine :as e]))

; (defelem level-button [{:keys [level type status]} kids]
;   (if (= status :old)
;     (span "âœ“")
;     (button :click #(js/alert "impl me") :class (str status) "Start researching...")))
; ;
; (defelem ^:private reached-list [{:keys [state type]} kids]
;   (for [level-key (e/reached-levels state type)]
;     (let [level (e/get-level type level-key)]
;       (tr :class (str :old)
;         (td (:name level))
;         (td (:clicks level))
;         (td (:cost level))
;         (td (level-button :level level :type type :status :old))))))
; ;
; (defelem ^:private unreached-list [{:keys [state type]} kids]
;   ; only show one unreached research level
;   (let [level-key (first (e/unreached-levels state type))
;         level (e/get-level type level-key)]
;     (tr :class (str :new)
;       (td (:name level))
;       (td (:clicks level))
;       (td (:cost level))
;       (td (level-button :level level :type type :status :new)))))
; ;
; (defelem product-levels [{:keys [state]} kids]
;   (div :class "levels"
;     (table
;       (caption "Product research")
;       (thead
;         (tr
;           (th "Name")
;           (th "Available after N words")
;           (th "Cost (clicks)")
;           (th "")))
;       (reached-list :state state :type :product) kids
;       (unreached-list :state state :type :product) kids)))

; ;
; (defelem tool-levels [{:keys [state]} kids]
;   (div :class "levels"
;     (table
;       (caption "Tool research")
;       (thead
;         (tr
;           (th "Name")
;           (th "Available after N words")
;           (th "$ Cost")
;           (th "")))
;       (reached-list :state state :type :tool) kids
;       (unreached-list :state state :type :tool) kids)))