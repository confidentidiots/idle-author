(ns ui.research
  (:import [goog.string.format])
  (:require
    [clicker.util :as u]
    [clicker.engine :as e]
    [data.db :as db]
    [goog.string :as gstring]
    [goog.string.format]))

(defelem ^:private tap-button [{:keys [state key btn-txt]} kids]
  (let [disabled (cell= (not (e/can-tap? state key)))
        click-fn #(e/tap state key)]
    (button :disabled disabled :click click-fn btn-txt kids)))

(defelem ^:private nexts [{:keys [next]} kids]
  (table :class "gain-loss"
    (for-tpl [it next]
      (let [name (cell= (str (key it)))
            val-bare (cell= (val it))
            val (cell= (u/currency-format (Math/abs val-bare)))]
        (tr (td name) (td val))))))

(defelem ^:private as-list [{:keys [state group btn-txt]} kids]
  (for [key (e/db-items-by-group group)
        :let [item-name (e/db-item-name key)
              next-loss (cell= (e/next-loss state key))
              count (cell= (e/thing-count state key))
              ; dependencies (e/get-dependencies state key)
              group-name (name group)]
        :when (not (= key :genesis))
        ; cell= here so dependency is re-checked when the state changes.
        :when (cell= (e/satisfies-dependencies? state key))]
    (tr :class (cell= {(str "unresearched-item-" group-name) (= count 0) (str "researched-item-" group-name) (> count 0)})
      (td item-name)
      ; (td (str dependencies))
      (td (nexts :next next-loss))
      (td (tap-button :state state :key key :btn-txt btn-txt)))))
;
(defelem item-list [{:keys [state groups]} kids]
  (div :class "research"
    (table
      (caption "Research")
      (thead
        (tr
          (th "Thing")
          ; (th "Depends on")
          (th "Cost")
          (th "")))
      (for [group groups]
        (as-list :state state :group group :btn-txt "Research")))))
