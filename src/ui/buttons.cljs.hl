(ns ui.buttons
  (:import [goog.string.format])
  (:require
    [clicker.engine :as e]
    [data.db :as db]
    [goog.string :as gstring]
    [goog.string.format]))

(defelem ^:private tap-button [{:keys [state key btn-txt n]} kids]
  (let [disabled (cell= (not (e/can-tap? state key :n n)))
        click-fn #(e/tap state name :n n)]
    (button :disabled disabled :click click-fn n kids)))

(defelem ^:private tap-buttons [{:keys [state key btn-txt]} kids]
  (for [n [1 10 100 1000]]
    (tap-button :state state :key key :btn-txt btn-txt :n n)))

(defelem ^:private as-list [{:keys [state group btn-txt]} kids]
  (for [key (db/items group)]
    (do
      (let [name (db/item-name key)
            loss (:clicks (db/item-loss key))
            next-gain 77 ; (e/next-gain state name)
            gain (cell= (gstring/format "%.2f" next-gain))
            count (cell= (e/thing-count state key))]

          (tr :class (cell= {:newitem (= count 0) :olditem (> count 0)})
            (td name)
            (td loss)
            (td gain)
            (td count)
            (td (tap-buttons :state state :key key :btn-txt btn-txt)))))))

;
(defelem tool-list [{:keys [state]} kids]
  (div :class "upgrade"
    (table
      (caption "Buy tools")
      (thead
        (tr
          (th "Thing")
          (th "$ Cost")
          (th "Boost")
          (th "# Bought")
          (th "")))
      (as-list :state state :group :tool :btn-txt "Buy"))))

;
(defelem product-list [{:keys [state]} kids]
  (div :class "sell"
    (table
      (caption "Sell your words")
      (thead
        (tr
          (th "Thing")
          (th "Word cost")
          (th "$ Income")
          (th "# Sold")
          (th "")))
      (as-list :state state :group :product :btn-txt "Sell"))))
