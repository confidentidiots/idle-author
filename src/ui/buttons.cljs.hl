(ns ui.buttons
  (:import [goog.string.format])
  (:require
    [clicker.util :as u]
    [clicker.engine :as e]
    [data.db :as db]
    [goog.string :as gstring]
    [goog.string.format]))

(defelem ^:private tap-button [{:keys [state key btn-txt n]} kids]
  (let [disabled (cell= (not (e/can-tap? state key :n n)))
        click-fn #(e/tap state key :n n)]
    (button :disabled disabled :click click-fn n kids)))
    ; (button :click click-fn n kids)))

(defelem ^:private tap-buttons [{:keys [state key btn-txt]} kids]
  (for [n [1 10 100 1000]]
    (tap-button :state state :key key :btn-txt btn-txt :n n)))

(defelem ^:private nexts [{:keys [next]} kids]
  (if (nil? (first next))
    (span "None")
    (table :class "gain-loss"
      (for [it next
            :let [name (str (key it))
                  val-bare (val it)
                  val (gstring/format "%.2f" (Math/abs val-bare))]]
        (tr (td name) (td val))))))

(defelem ^:private as-list [{:keys [state group btn-txt]} kids]
  (for [key (e/db-items-by-group group)
        :let [name (e/db-item-name key)
              next-loss (e/next-loss state key)
              next-gain (e/next-gain state key)
              count (cell= (e/thing-count state key))]
        :when (not (= key :genesis))
        :when (e/has-dependency? state key)]
    (tr :class (cell= {:newitem (= count 0) :olditem (> count 0)})
      (td name)
      (td (nexts :next next-loss))
      (td (nexts :next next-gain))
      (td count)
      (td (tap-buttons :state state :key key :btn-txt btn-txt)))))
;
(defelem tool-list [{:keys [state]} kids]
  (div :class "upgrade"
    (table
      (caption "Buy tools")
      (thead
        (tr
          (th "Thing")
          (th "$ Cost")
          (th "Boost")
          (th "# Bought")
          (th "")))
      (as-list :state state :group :tool :btn-txt "Buy"))))
;
(defelem product-list [{:keys [state]} kids]
  (div :class "sell"
    (table
      (caption "Sell your words")
      (thead
        (tr
          (th "Thing")
          (th "Word cost")
          (th "$ Income")
          (th "# Sold")
          (th "")))
      (as-list :state state :group :product :btn-txt "Sell"))))
;
(defelem item-list [{:keys [state group]} kids]
  (div :class "sell"
    (table
      (caption (str group))
      (thead
        (tr
          (th (str group))
          (th "Loss")
          (th "Gain")
          (th "# tapped")
          (th "")))
      (as-list :state state :group group :btn-txt "Sell"))))